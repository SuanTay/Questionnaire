package fr.limos.db.entities;
// default package
// Generated 5 janv. 2016 13:26:43 by Hibernate Tools 4.3.1.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;

/**
 * Choice generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "choice", catalog = "chu")
@NamedQuery(name="allchoice",query="SELECT i FROM Choice i")
public class Choice implements java.io.Serializable {

	private ChoiceId id;
	private Simplequestion simplequestion;
	private boolean multiple;
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private Set<Answer> answers = new HashSet(0);

	public Choice() {
	}

	public Choice(Simplequestion simplequestion, boolean multiple) {
		this.simplequestion = simplequestion;
		this.multiple = multiple;
	}

	public Choice(Simplequestion simplequestion, boolean multiple, Set<Answer> answers) {
		this.simplequestion = simplequestion;
		this.multiple = multiple;
		this.answers = answers;
	}

	@EmbeddedId

	@AttributeOverrides({
			@AttributeOverride(name = "fkIdQuestion", column = @Column(name = "fk_id_question", nullable = false) ),
			@AttributeOverride(name = "fkIdSection", column = @Column(name = "fk_id_section", nullable = false) ),
			@AttributeOverride(name = "fkIdSurvey", column = @Column(name = "fk_id_survey", nullable = false) ) })
	public ChoiceId getId() {
		return this.id;
	}

	public void setId(ChoiceId id) {
		this.id = id;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	public Simplequestion getSimplequestion() {
		return this.simplequestion;
	}

	public void setSimplequestion(Simplequestion simplequestion) {
		this.simplequestion = simplequestion;
	}

	@Column(name = "multiple", nullable = false)
	public boolean isMultiple() {
		return this.multiple;
	}

	public void setMultiple(boolean multiple) {
		this.multiple = multiple;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "choice")
	public Set<Answer> getAnswers() {
		return this.answers;
	}

	public void setAnswers(Set<Answer> answers) {
		this.answers = answers;
	}

}
